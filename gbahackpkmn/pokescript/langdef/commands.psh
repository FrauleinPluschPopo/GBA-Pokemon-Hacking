/***************************************************************\
 * 
 
-----------------------------------------------------------------
User-Friendly commands for PokeScript
GBA-Rom: Ruby, Sapphire, Fire Red, Leaf Green, Emerald.
Version: 2.0.0
Author: Dabomstew, TheUC
-----------------------------------------------------------------

 -----
 USAGE
 -----

 addcmmd <command name> <command code> ' [description]
	Please note command name must be one word.
	Commmand code must be one byte value.

 alias <command alias> ' [description]
	Alias allows you to map commands to new commands.

	Descriptions and comments are ignored here and the
	alias must read as the completed command line
	replacing the values with $# (ie $1 $2 etc).

	Must be followed by addparm which acts to list the
	components of the expanded script.

 addparm <size> [data] ' [description]
	Addparm must directly follow a command initialized
	by the addcmmd or alias command. 

	When following addcmmd it lists the size and
	descriptions of the command paramaters.

	When following alias it lists the commands values
	and paramaters written in their expanded form,
	
	The data option is used to supply details when needed
	and will override the description. Under an alias it will
	act like a mask.


 addparm values:
	Data will not be writen if non-numeric
	0 = byte 
	1 = word 
	2 = dword
	3 = pointer
	4 = Indicates the end of a script segment (used in decoding)
	5 = Enumerate Values - [data] provides a list of elements
	    seperated by commas. The value will be matched up
	    to the element in [data]. If no value is provided the
	    first element is used.
	6 = Mask
	7 = Keyword
	8 = Indicates a pointer that links to textual data
	9 = Indicates a pointer that links to movement data

\***************************************************************/

' ----------------
' COMMAND DATABASE
' ----------------
'  Please note. If an item is duplicated on either side then that
'  side will not be added and only the first item will be used in
'  decoding/encoding
'
'  All values must be in hex

addcmmd nop0 #00        'Does nothing
addcmmd nop  #01        'Does Nothing

addcmmd end  #02        'Ends Script Execution
addparm 4               

addcmmd return #03      'Pop back to calling command
addparm 4               

addcmmd call #04        'Jump to another point in script. Can be returned to.
addparm 3               'Point to jump to

addcmmd jump #05        'Continue execution from another point. 
addparm 3               'Point to continue from
addparm 4

addcmmd if #06          'Boolean compare value in var LASTRESULT, if evaluates to true, jumps to the given routine. Should not be returned to.
addparm 0:bool          '0 false, 1 true
addparm 3               'Offset to jump to

addcmmd if_jump #06     'Boolean compare value in var LASTRESULT, if evaluates to true, jumps to the given routine. Should not be returned to.
addparm 0:bool          '0 false, 1 true
addparm 3               'Offset to jump to

addcmmd if_call #07     'Boolean compare value in var LASTRESULT, if evaluates to true, calls the given routine. Return to it by calling "return".
addparm 0:bool          '0 false, 1 true
addparm 3               'Offset of script to call

addcmmd jumpstd #08     'Jump to a built in function, should not be returned to.
addparm 0               'Function numder to jump to
addparm 4               

addcmmd callstd #09     'Call a built in function. Return to it by calling "return".
addparm 0:msgtype       'Function to call. 1- text no close. 2- yes/no box, 3-text clost on keypress

addcmmd boxset #09      'Call a built in function. Return to it by calling "return".
addparm 0:msgtype       'Function to call. 1- text no close. 2- yes/no box, 3-text clost on keypress

addcmmd if_jumpstd  #0A 'Jumpstd version of if. Should not be returned to.
addparm 0:bool          '0 false, 1 true
addparm 0               'function number to jump to

addcmmd if_callstd #0B  'Callstd version of if. Return to it by calling "return".
addparm 0:bool          '0 false, 1 true
addparm 0               'function to call

'TODO: Verify
'addcmmd jumpram #0C

addcmmd killscript #0D  'Kill script and erase all script stuff
addparm 4               '

addcmmd setbyte #0E     'set 0x2039288 + 6c to a specific value
addparm 0               'byte to use

addcmmd loadpointer #0F 'Load a pointer into script RAM so commands can use it
addparm 0               'Memory bank to use
addparm 8               'Pointer to load into memory

'TODO #10 SETBYTE 2
'addcmmd setbyte2 #10


addcmmd writebytetooffset #11   'Set a byte at an offset to a certain value
addparm 0                       'Value to write
addparm 2                       'Location to write to

addcmmd loadbytefrompointer #12 'Load the byte found at a pointer into ram so other commands can use it
addparm 0 'Memory bank to use
addparm 2 'Pointer to byte to load into memory

'TODO #13: SETFARBYTE

addcmmd copyscriptbanks #14 'Copy one script to another
addparm 0 'bank 1
addparm 0 'bank 2

addcmmd copybyte #15 'Copy value from one place to another
addparm 2 'Source location
addparm 2 'Destination location

addcmmd setvar #16 'Set variable a to any value
addparm 1:var 'Variable no
addparm 1     'Value

addcmmd addvar #17 'Add value b to variable A
addparm 1:var 'Variable A
addparm 1     'Value b

addcmmd subvar #18 'Subtract value b from variable A
addparm 1:var 'Variable A
addparm 1     'Value b

addcmmd copyvar #19 'copy variable from var A to var B
addparm 1:var 'Variable A
addparm 1:var 'Variable B

addcmmd copyvarifnotzero #1A 'Copy var A to var B if var A > 0
addparm 1:var 'Variable A
addparm 1:var 'Variable B

addcmmd comparevars #1B 'Compare to variables
addparm 1:var 'Variable A
addparm 1:var 'Variable B

addcmmd comparevartobyte #1C 'Compares a variable to a byte
addparm 1:var 'Variable
addparm 0     'Byte Value

addcmmd comparevartofarbyte #1D 'Compare a variable with a byte at some location
addparm 1:var 'Variable
addparm 2     'Pointer to a byte value to compare the var to


addcmmd comparefarbytetovar #1E 'Compares a byte at some location to a variable
addparm 2     'Pointer to a byte value to compare the var to
addparm 1:var 'Variable

addcmmd comparefarbytetobyte #1F 'Compares a byte at some location to a byte value
addparm 2     'Pointer to a byte value to compare with
addparm 0     'Byte value to compare with

addcmmd comparefarbytetofarbyte #20 'Compares bytes at pointer locations
addparm 2     'Pointer to a byte value to compare with
addparm 2     'Pointer to a byte value to compare with

addcmmd compare #21 'Compare variable to a value
addparm 1:var 'Variable
addparm 1     'Value to compare to

'TODO: comparepointer does not compare pointers, find usage to determine what
'      this call does.
addcmmd comparepointer #22 'Compare variable A to variable B
addparm 1:var 'Variable A
addparm 1:var 'Variable B

addcmmd callasm #23 'Call a custom ASM routine
addparm 2 'Address of custom ASM routine

addcmmd callasm2 #24
addparm 2

addcmmd special #25 'Call a special event
addparm 1:special 'Number of special command to call

addcmmd special2 #26 'Like Special, but can store a returned value
addparm 1:var     'Variable to store returned value in
addparm 1:special 'Special event to call

addcmmd waitspecial #27

addcmmd pause #28 'Pause script execution,1
addparm 1 'delay period

addcmmd setflag #29 'Set a flag value to control values stored in game
addparm 1:flag 'Flag index

addcmmd clearflag #2A 'Clear a flag,1
addparm 1:flag 'Flag index

addcmmd checkflag #2B 'Check the value of a flag and puts result in LASTRESULT
addparm 1:flag 'Flag index

addcmmd CMD2C #2C
addparm 1
addparm 1

addcmmd CMD2D #2D

addcmmd RESETVARS #2E

addcmmd playsfx #2F
addparm 1 'entry in music/sounds table

addcmmd[rs][e] cry #30 'Play back a pokemon cry
addparm 0      'bank no
addparm 1:pkmn 'Pokemon Species

addcmmd[frlg] checksound #30 'Call before `cry <pkmn> 0`

addcmmd fanfare #31   'Play background music
addparm 1             'Song # to play

addcmmd waitfanfare #32 'Wait for the fanfare to finish

addcmmd[rs][e] playsound #33 'switch background music
addparm 1  'Song number to play

addcmmd[frlg] playsound #33 'switch background music
addparm 1  'Song number to play
addparm 0  'extra FRLG parameter

addcmmd playsong #34  'Fade music back to map song
addparm 1             'Song

addcmmd fadedefault #35 'Fade into another song

addcmmd fadesong #36   '
addparm 1              '

addcmmd fadeout #37    'Fade out music
addparm 0              '??? Speed ??? Required?

addcmmd fadein #38     'Fade in music
addparm 0              '??? Speed ??? Required?

'TODO: FInd out how the following warp commands work!
'addcmmd WARP #39
'addcmmd WARP_MUTED #3A
'addcmmd WARP_WALKING  #3B
'addcmmd WARP_DOWNHOLE #3C

addcmmd WARP_TELEPORT #3D
addparm 0
addparm 0
addparm 0

addcmmd WARP_3 #3E
addparm 0  '?
addparm 0  '?
addparm 0  '?
addparm 0  '?
addparm 0  '?

addcmmd WARP_ELEVATOR #3F
addparm 0
addparm 0
addparm 0

addcmmd WARP_4        #40
addparm 0
addparm 0
addparm 0

addcmmd WARP_5        #41
addparm 0
addparm 0
addparm 0

addcmmd GETPLAYERXY #42
addparm 1
addparm 1

addcmmd countpokemon #43        '

addcmmd additem #44             'Adds one item x times to your bag. (If itemcount_in_bag + itemcount_to_add > 999, nothing will happen).
addparm 1:item                  'Item to add.
addparm 1                       'Number of the items to be added

addcmmd removeitem #45          'Remove one item x times from your bag. (If itemcount_in_bag - itemcount_to_remove < 0, nothing will happen).
addparm 1:item                  'Item to remove.
addparm 1                       'Number of the items to be removed

addcmmd checkitemspaceinbag #46 'Checks wheter there is space in the bag for the given item. The result is stored in LASTRESULT, 1 or TRUE if there is enough space.
addparm 1:item                  'Item to check for.
addparm 1                       'Quantity (is there at least space for this number of space left?).

addcmmd checkitem #47           'Check if the player has an item. The result is stored in LASTRESULT.
addparm 1:item                  'Item to check for.
addparm 1                       'quantity (has the player at least this number of same items?).

addcmmd checkitemtype #48       'Stores the item type for the given item in LASTRESULT.
addparm 1:item                  'Item to check for.

addcmmd additemtopc #49         'Puts a number of an items to your PC (does not remove them from your bag!).
addparm 1:item                  'Item to move.
addparm 1                       'Quantity.

addcmmd checkitempc #4A         'Checks if the player has an item stored in its PC. The result is stored in LASTRESULT.
addparm 1:item                  'Item to check for.
addparm 1                       'quantity (has the player at least this number of same items?).

addcmmd addfurniture #4B        '
addparm 1:furniture             'Type

addcmmd takefurniture #4C       '
addparm 1:furniture             'Type

addcmmd checkifroomforfurniture #4D
addparm 1  '?

addcmmd checkfurniture #4E
addparm 1  '?

addcmmd applymovement #4F 'Applyies movement at a pointer location to a sprite
addparm 1:applymovement 'Sprite to control
addparm 9               'Pointer to the movement data

'TODO: Alias this
addcmmd applymovement2 #50 'Applymovement Finish At
addparm 1 'Sprite to control
addparm 9 'Pointer to movement data
addparm 0 'X
addparm 0 'Y

addcmmd pausemove #51 'Wait for an event to finish
addparm 1 'Zero for applymovement

'TODO: Missing: #52

addcmmd removesprite #53
addparm 1 'people no

addcmmd removespriteat #54
addparm 1 'people no
addparm 0 'x
addparm 0 'y

addcmmd showsprite #55
addparm 1 'people no

'TODO: Alias
addcmmd showspriteat #56
addparm 1 'people no
addparm 0 'x
addparm 0 'y

addcmmd movesprite #57 'Move a sprite to the specified location
addparm 1 'Sprite to move
addparm 1 'x co-ordinates to move to
addparm 1 'y co-ordinates to move to

addcmmd farreappear #58
addparm 1 'Sprite
addparm 0 'bank
addparm 0 'map

addcmmd fardisappear #59
addparm 1 'Sprite
addparm 0 'bank
addparm 0 'map

addcmmd faceplayer #5A 'Turn caller to player

addcmmd spriteface #5B
addparm 1 'Sprite
addparm 0 'Face

'''addcmmd trainerbattle #5C
'' Trainer Battles are added as aliases, since number of
'' Parameters differ on different parameters

addcmmd lasttrainerbattle #5D

addcmmd endtrainerbattle #5E

addcmmd endtrainerbattle2 #5F

addcmmd checktrainer #60
addparm 1

addcmmd disabletrainer #61
addparm 1

addcmmd enabletriner #62
addparm 1

addcmmd movesprite2 #63
addparm 1 'Sprite to move
addparm 1 'x co-ordinates to move to
addparm 1 'y co-ordinates to move to

addcmmd moveofscreen #64
addparm 1 'Sprite to move

addcmmd spritebehave #65
addparm 1 'Sprite
addparm 0 'behave id

addcmmd waitmsgbox2 #66

addcmmd msgbox2 #67
addparm 8 'pointer to text

addcmmd closeonkeypress #68 'see HackMew post on PC for reason of change

addcmmd lockall #69 'Locks all players

addcmmd lock #6A 'Locks down the movement of the caller

addcmmd releaseplayer #6B ' Resumes movement for player but not NPC

addcmmd release #6C 'Resumes movement for caller

addcmmd waitbutton #6D

addcmmd showyesno #6E
addparm 0 'X
addparm 0 'Y

addcmmd multi #6F 'Put up a list of choices for the player to make
addparm 0 'Left co-ordinate for window
addparm 0 'Top coordinate to draw the window
addparm 0 'choice list # to use
addparm 0 'Determines wether you can use the B button to cancel

addcmmd multichoice2 #70 'TODO: 4 or 5 params?
addparm 0 'X
addparm 0 'Y
addparm 0 'List
addparm 0 'Abletocancel: OR'd binary bits: 0x01 = unable, 0x02 = return 127

addcmmd multichoise3 #71
addparm 0 'X
addparm 0 'Y
addparm 0 'List
addparm 0 'Default choise
addparm 0 'Abletocancel: OR'd binary bits: 0x01 = unable, 0x02 = return 127

addcmmd showbox #72    'TODO: Verify
addparm 0 'X
addparm 0 'Y
addparm 0 'Width
addparm 0 'Height

addcmmd hidebox #73    'TODO: Verify
addparm 0 'X
addparm 0 'Y
addparm 0 'Width
addparm 0 'Height

addcmmd clearbox #74    'TODO: Verify
addparm 0 'X
addparm 0 'Y
addparm 0 'Width
addparm 0 'Height

addcmmd showpokepic #75
addparm 1:var 'Variable containing pokemon. ID
addparm 0     'X-pos
addparm 0     'Y-pos

addcmmd hidepokepic #76

addcmmd picture #77
addparm 0 'Num

addcmmd braille #78 'TODO: Verify
addparm 8 'Pointer to text

addcmmd addpokemon #79 'Gives the player a pokemon (Not to be used by player!)
addparm 1:pkmn 'Pokemon species to give
addparm 0      'Level of pokemon
addparm 1:item 'Item # to be held
'TODO: Maybe we need 0 2 2 here !?!?!

addcmmd egghandler #7A
addparm 1 'Poke

addcmmd setpokemonpp #7B
addparm 0 'pkmn slot
addparm 0 'move slot
addparm 1 'pp

addcmmd checkmove #7C
addparm 1 'move id

addcmmd namedisplay #7D    'TODO: StorePokemon?!?
addparm 0 'bank of names
addparm 1 'name number / poke

addcmmd namedisplayfirst #7E 'TODO: StoreFirstPokemon?
addparm 0 'bank of names

addcmmd partynamedisplay #7F 'TODO: StorePartyPokemon?
addparm 0     'slot as in namedisplay
addparm 1:var 'var, hint LASTRESULT

'TODO: Verify, is :item really an item??
addcmmd itemnamedisplay #80
addparm 0      'slot
addparm 1:item 'item id - check to see if this uses < or not

addcmmd furnituredisplay #81
addparm 0
addparm 1

'TODO: Verify: is :move really a move??
addcmmd movedisplay #82
addparm 0      'slot as in namedisplay etc
addparm 1:move 'move id, not variable

addcmmd vardisplay #83
addparm 0     'position 0, 1, or 2
addparm 1:var 'variable

addcmmd storecomp #84
addparm 0
addparm 1

addcmmd storetext #85 'thanks to "score_under" from PC for this definition
addparm 0 'slot
addparm 8 'pointer to text

addcmmd pokemart #86 'Opens the pokemart shop system
addparm 3 'Pointer to the item/price list

addcmmd buymart #87 'Opens the shop system with buy only (RSE exclusive, acts as normal mart in FRLG)
addparm 3 'Pointer to the item/price list

addcmmd[frlg] fakejumpstd #88 
addparm 0 'type ??

addcmmd[rs][e] pokemarkt3 #88
addparm 3 'Pointer to the item/price list

addcmmd[frlg] fakecallstd #89
addparm 0 'type ??

addcmmd[rs][e] pokemarkt3 #89
addparm 1 '??

addcmmd cmd8A #8A
addparm 0
addparm 0
addparm 0 

addcmmd choosecontestpokemon #8B

addcmmd startcontest #8C    '

'No #8D ??

addcmmd[e] startwireles #8E '

addcmmd rand #8F            'Generate a random number, store the result in LASTRESULT.
addparm 1                   'Maximum random number.

addcmmd givemoney #90       'Gives the player an amount of money
addparm 2                   'Amount
addparm 0                   '? (0 as default works fine)

addcmmd takemoney #91       'Take an amount of money from the player
addparm 2                   'Amount
addparm 0                   '? (0 as default works fine)

addcmmd checkmoney #92      'Checks whether the player has this amount of money, result is stored in LASTRESULT.
addparm 2                   'Amount
addparm 0                   '? (0 as default works fine)

addcmmd showmoneybox #93    'Shows a moneybox, placed at position X, Y.
addparm 0                   'X
addparm 0                   'Y
addparm 0                   '? (0 as default works fine)

addcmmd hidemoneybox #94    'Hides the moneybox, placed at Position X, Y.
addparm 0                   '? (0 as default works fine)
addparm 0                   '? (0 as default works fine)

addcmmd updatemoneybox #95  'Updates the moneybox, placed at Position X, Y.
addparm 0                   '? (0 as default works fine)
addparm 0                   '? (0 as default works fine)
addparm 0                   '? (0 as default works fine)

addcmmd cmd96 #96           '??
addparm 1                   '

addcmmd fadescreen #97      'Fades the screen in or out.
addparm 0:fade              'Fade method (in or out)

addcmmd fadescreen_slow #98 'Slowly fades the screen in or out.
addparm 0:fade              'Fade method (in or out)
addparm 0                   'Speed of fade animations (in frames?)

'TODO: Understand this command, is it a RSE command? Idem for lightroom.
'      And are the paramtypes correct?
addcmmd darkenroom #99      '?
addparm 1                   '? Size

addcmmd lightroom #9A       '?
addparm 0                   '? Size

addcmmd msgbox3 #9B
addparm 8

addcmmd PlayAnimation #9C  'TODO: FInd out params, only 1 is suggested by pk-script-view
addparm 1 '? use 0x25
addparm 0 '? use 0x27

addcmmd StorePartySlotForAnimation #9D
addparm 0     '?
addparm 1:var 'variable containing animation

addcmmd CheckAnimation #9E
addparm 1 '?

addcmmd sethealingplace #9F
addparm 1 'Place

addcmmd checkgender #A0 'Stores the players gender in var LASTRESULT (var 0x800d: 0=boy, 1=girl).

addcmmd[frlg] cry #A1   'Plays a Pokemon cry
addparm 1:pkmn          'Species sound to hear
addparm 1               'Seems to be padding. 0 is sufficient

addcmmd setmaptile #A2 'Sets a tile on the map. You must somehow refresh that part, can be done by scrolling out of view and back in or by calling this command from a Level Script
addparm 1               'X coordinate
addparm 1               'Y coordinate
addparm 1               'Tile number
addparm 1               'Tile attributes

addcmmd resetweather #A3        'Resets the weather animation to the original weather.

addcmmd[rs][e] setweather #A4   'Prepare to fade the weather into the type specified.
addparm 0:weather               'Weather type to change to.

addcmmd[frlg] setweather #A4    'Prepare to fade the weather into the type specified.
addparm 1:weather               'Weather type to change to.

addcmmd doweather #A5           'Triggers the weather change set with SetWeather

addcmmd cmdA6 #A6
addparm 0

addcmmd setmapfooter #A7
addparm 1

addcmmd increasespritelevel #A8
addparm 1               'id
addparm 0               'bank
addparm 0               'map
addparm 0               '?

addcmmd resetspritelevel #A9
addparm 1               'id
addparm 0               'bank
addparm 0               'map

addcmmd createtempsprite #AA
addparm 0               'Sprite
addparm 0               'ID
addparm 1               'X
addparm 1               'Y
addparm 0               'Behave
addparm 0               'Direciton

addcmmd tempsriteface #AB
addparm 0               'ID
addparm 0               'Direction

addcmmd opendoor #AC
addparm 1               'x-pos of door to open
addparm 1               'y-pos

addcmmd closedoor #AD
addparm 1               'x-pos of door to close
addparm 1               'y-pos

addcmmd doorflush #AE   'always called directly after "opendoor" and "closedoor", waits for door animation to finish

addcmmd opendoorpermanent #AF
addparm 1               'x-pos of door to open
addparm 1               'y-position

addcmmd closedoorpermanent #B0
addparm 1               'x-pos of door to close
addparm 1               'y-pos

addcmmd cmdB1 #B1       'Unknown command
addparm 0               '
addparm 0               '
addparm 1               '
addparm 1               '

addcmmd cmdB2 #B2       'Unknown command

addcmmd getcoins #B3    'Put the players number coins in a variable.
addparm 1:var           'variable to store current coin amount in.

addcmmd givecoins #B4   'Give the player a number of coins.
addparm 1               'Amount of coins to give to player.

addcmmd takecoins #B5   'Substracks a number of coins, value to substract is stored in a variable.
addparm 1               'Variable in which the amount of coins to take away is stored.

addcmmd wildbattle #B6  'Prepare a wild pokemon battle. Should call one of the `startwildbattle` commands after it to actually start the battle.
addparm 1:pkmn          'Pokemon species.
addparm 0               'Pokemon level.
addparm 1:item          'Item the wild pokemon holds.

addcmmd lastbattle #B7


addcmmd showcoinbox #C0
addparm 0               'X
addparm 0               'Y

addcmmd hidecoinbox #C1
addparm 0               'X
addparm 0               'Y

addcmmd updatecoinbox #C2
addparm 0               'X
addparm 0               'Y

addcmmd CMDC3 #C3
addparm 0

addcmmd warp6 #C4
addparm 0 'Bank
addparm 0 'Map
addparm 0 'Exit
addparm 1 'X
addparm 1 'Y

addcmmd waitcry #C5

addcmmd storeboxname #C6  ' \v\hxx boxno
addparm 0 'xx
addparm 1 'boxno

addcmmd textcolor #C7
addparm 0:col '0=blue 1=red 2+=black

addcmmd boxtypesign #CA 'changes the msgbox appearance to that of a sign
addcmmd boxtypenormal #CB 'changes the msgbox appearance to normal, the one where you're talking to someone

addcmmd comparehiddenvar #CC
addparm 0:var 'Variable
addparm 1     'Value

addcmmd setobedience #CD
addparm 1 'ID

addcmmd checkobedience #CE
addparm 1 'ID

addcmmd executeram #CF

addcmmd setworldmapflag #D0
addparm 1 'Flag

addcmmd warpteleport2 #D1
addparm 0 'bank
addparm 0 'map
addparm 0 'ext
addparm 1 'X
addparm 1 'Y

addcmmd setcatchlocation #D2
addparm 1 'ID
addparm 0 'location


addcmmd cmdD3 #D3  'TODO: Verify
addparm 8 'Braille

addcmmd storeitems #D4 ' \v\hxx  id amount
addparm 0  'xx
addparm 1  'ID
addparm 1  'Amount


addcmmd[e] pokenav #DF 'emerald only, equivalent to "msgbox2" so call "waitmsgbox2" after this.
addparm 8 'ptr to text


addcmmd cmdFB #FB '??
addparm 2  'Addr?

addcmmd cmdFE #FE '??
addparm 0


addcmmd wlhandler #39
addparm 0
addparm 0
addparm 0
addparm 1
addparm 1


addcmmd hashpoke #7D
addparm 1
addparm 0


/************\
| CONSTRUCTS |
\------------*/

alias givepokemon $1 $2 $3 ' Give pokemon to Player
addparm 7 copyvar
addparm 1 mask(#8004)
addparm 1 mask(#800D)
addparm 7 addpokemon
addparm 1:pkmn      'Pokemon species to give
addparm 0           'Level of pokemon
addparm 1:item      'Item # to be held
addparm 2 mask(#00000000)
addparm 2 mask(#00000000)
addparm 7 hashpoke
addparm 1 mask(#1901)
addparm 0 mask(#00)
addparm 2 mask(#00000000)
addparm 2 mask(#00000000)

alias namepokemon ' Name a pokemon identified with Selectpokemon or givepokemon
addparm 7 fadescreen
addparm 0 0x00
addparm 7 special
addparm 1 mask(#009E)
addparm 0 0x25 'Special
addparm 2 mask(#04008003)
addparm 2 mask(#01743180)
addparm 2 mask(#1A149867)
addparm 2 mask(#45326608)
addparm 2 mask(#00018004)
addparm 0 mask(#6b)

'TODO: FR Only???
alias healpokemon           'Heal all pokemon, include fadescreen animation.
addparm 0 mask(#68)         ' GrabMove
addparm 0 mask(#04)         ' Call 0x081A6C26
addparm 0 mask(#26)
addparm 0 mask(#6c)
addparm 0 mask(#1a)
addparm 0 mask(#08)

alias selectpokemon         'Display "Select pokemon" dialog
addparm 7 special           '
addparm 0 mask(#73)         '
addparm 7 copyvar           '
addparm 1 mask(#800a)       '
addparm 1 mask(#8004)       '


alias startwildbattle       'Starts a wild battle. Should call wildbattle first.
addparm 7 special           '
addparm 1 mask(#0143)       '

alias startwildbattle1      'Starts a wild pokemon battle, alternate song 1.
addparm 7 special           '
addparm 1 mask(#0137)       '

alias startwildbattle2      'Starts a wild pokemon battle, alternate song 2.
addparm 7 special           '
addparm 1 mask(#0138)       '

alias startwildbattle3     'Starts a wild pokemon battle, alternate song 3.
addparm 7 special           '
addparm 1 mask(#0139)       '

alias giveitem $1 $2        'Give item to player. (Alters vars 0x8000 and 0x8001).
addparm 7 copyvarifnotzero  '
addparm 1 mask(#8000)       '
addparm 1:item              'Item to give
addparm 7 copyvarifnotzero  '
addparm 1 mask(#8001)       '
addparm 1                   'Number of items
addparm 7 callstd           'Message
addparm 0 0                 '"Obtained, put ITEM in bag."

alias finditem $1 $2        'Player finds an item.  (Alters vars 0x8000 and 0x8001).
addparm 7 copyvarifnotzero  '
addparm 1 mask(#8000)       '
addparm 1:item              'Item to be found
addparm 7 copyvarifnotzero  '
addparm 1 mask(#8001)       '
addparm 1                   'Number of Items
addparm 7 callstd           'Message
addparm 0 1                 '"Found, put ITEM in bag."

alias message $1            'Shows a message in a default message box. Message does not close. Make sure you call `release` to get rid of it.
addparm 7 loadpointer       '
addparm 0 mask(#00)         '
addparm 8                   ' text offset
addparm 7 boxset            '
addparm 0 mask(#04)         'Type of message. 

alias message $2 $1         'Shows a message to the player. Different types of messages are possible.
addparm 7 loadpointer       '
addparm 0 mask(#00)         '
addparm 8                   'text offset
addparm 7 boxset            '
addparm 0:msgtype           'Type of message.

alias setmessage $1         'Loads a message into memory, which can be shown with boxset  (example: msgbox $t1, boxset MSG_NOCLOSE)
addparm 7 loadpointer       '
addparm 0 mask(#00)         '
addparm 8                   'text offset



alias frmart $1
addparm 0 mask(#67)
addparm 7 writebytetooffset
addparm 0 mask(#62)
addparm 0 mask(#1a)
addparm 0 mask(#08)
addparm 0 mask(#66)
addparm 0 mask(#8e)
addparm 7 pokemart
addparm 2 'Pointer to pokemart data

alias givemoney $1      'Gives the given amount of money to the player.
addparm 7 givemoney     '
addparm 2 'Money amt    'Amount to give
addparm 0 mask(#00)     '

alias takemoney $1      'Removes the given amount of the players money wall.
addparm 7 takemoney     '
addparm 2               'Amount to take
addparm 0 mask(#00)     '

alias checkmoney $1     'Checks whether user has a certain amount of money. Bool value is stored in LASTRESULT.
addparm 7 checkmoney    '
addparm 2 'Money amt    'Amount to check for (player has at least this amount)
addparm 0 mask(#00)     '

alias showmoneybox      'Show the current money in a box
addparm 7 showmoneybox  '
addparm 0 mask(#00)     '
addparm 0 mask(#00)     '
addparm 0 mask(#00)     '

alias hidemoneybox      'Hides the moneybox
addparm 7 hidemoneybox  '
addparm 0 mask(#00)     '
addparm 0 mask(#00)     '

alias updatemoneybox    'Updates the moneybox
addparm 7 updatemoneybox'
addparm 0 mask(#00)     '
addparm 0 mask(#00)     '
addparm 0 mask(#00)     '

alias getrunningshoes   'Gives the running shoes to the player
addparm 7 setflag       '
addparm 1 mask(#082f)   '

alias getpokemonmenu    'Enables the Pokemon menu
addparm 7 setflag       '
addparm 1 mask(#0828)   '

alias getpokedex        'Enables the Pokedex menu
addparm 7 setflag       '
addparm 1 mask(#0829)   '

alias getnationaldex    'Enables the national dex.
addparm 7 special       '
addparm 1 mask(#016F)   '

alias starterpokemon $1
addparm 7 copyvar
addparm 1 mask(#8004)
addparm 1 mask(#800D)
addparm 7 addpokemon
addparm 1:var               'Var of pokemon to give
addparm 0 mask(#05)         'Level of pokemon
addparm 1 mask(#0000)       'Item held
addparm 2 mask(#00000000)
addparm 2 mask(#00000000)
addparm 7 hashpoke
addparm 1 mask(#1901)
addparm 0 mask(#00)
addparm 2 mask(#00000000)
addparm 2 mask(#00000000)

alias vanish $1
addparm 7 removesprite
addparm 1

alias giveegg $1
addparm 2 mask(#67007231)
addparm 2 mask(#0816C2EA)
addparm 1 mask(#6632)
addparm 7 egghandler
addparm 1:pkmn 'pokemon to be given

alias checkpokemon $1
addparm 7 setvar
addparm 1 mask(#4036)
addparm 1 'pokemon to check for
addparm 7 copyvar
addparm 1 mask(#8004)
addparm 1 mask(#4036)
addparm 7 special2
addparm 1 mask(#800D)
addparm 1 mask(#017C)

alias getname $1
addparm 7 setvar
addparm 1 mask(#800D)
addparm 1 'pokemon id
addparm 0 mask(#7D) 'cmd
addparm 0 mask(#00)
addparm 1 mask(#800D)

alias warplocation $1 $2 $3 $4 'Warp to another level at a specific XY point
addparm 7 wlhandler
addparm 0:bank 'Bank to warp to
addparm 0      'Level to warp to
addparm 0 mask(#FF)
addparm 1 'x-pos
addparm 1 'y-pos

alias showmsg $1		' loadpointer for use in text
addparm 7 loadpointer 
addparm 0 mask(#00)
addparm 8
addparm 7 callstd
addparm 0 mask(#06)

alias simplenpc $1		' loadpointer for use in text
addparm 7 lock
addparm 7 faceplayer
addparm 7 loadpointer 
addparm 0 mask(#00)
addparm 8
addparm 7 callstd
addparm 0 mask(#06)
addparm 7 release
addparm 7 end

alias simplesign $1		' loadpointer for use in text
addparm 7 loadpointer
addparm 0 mask(#00)
addparm 8
addparm 7 callstd
addparm 0 mask(#06)
addparm 7 release
addparm 7 end

alias showmsgstatic $1		' loadpointer for use in text
addparm 7 loadpointer 
addparm 0 mask(#00)
addparm 8
addparm 7 callstd
addparm 0 mask(#04)

alias question $1
addparm 7 loadpointer
addparm 0 mask(#00)
addparm 8
addparm 7 callstd
addparm 0 mask(#05)

alias simpletakecoins $1
addparm 7 setvar
addparm 1 mask(#4002)
addparm 1 'coins to take
addparm 7 takecoins
addparm 1 mask(#4002)

'
' If Construct
'
' DETERMINES IF THE RESULTS FROM COMPARE RETURNED
' GREATER, LOWER, EQUAL OR NOT EQUAL
' THEN JUMPS TO OR CALLS A POINTER ACCORDINGLY.
'
'

alias if $1 jump $2     'if_jump
addparm 7 if_jump       '
addparm 0               '$Val
addparm 3               '$Val

alias if $1 call $2     'if_call
addparm 7 if_call       '
addparm 0               '$Val
addparm 3               '$Val

alias if $1 jumpstd $2  'if_jumpstd
addparm 7 if_jumpstd    '
addparm 0               '$Val
addparm 0               '$Val2

alias if $1 callstd $2  'if_callstd
addparm 7 if_callstd    '
addparm 0               '$Val
addparm 0               '$Val2

alias if $1 boxset $2   'if_callstd
addparm 7 if_callstd    '
addparm 0               '$Val
addparm 0               '$Val2

alias ifvar $1 $3 $2 jump $4 'If the value in var is equal to some other value, call the script at the given offset.
addparm 7 compare
addparm 1:var           'variable
addparm 1               ' value to test for
addparm 7 if_jump       '
addparm 0:boolexp       'Comparison type (`<` `==` `>` `<=` `>=` or `!=`)
addparm 3               'pointer to jump to

alias ifvar $1 $3 $2 call $4 'If the value in var is equal to some other value, call the script at the given offset.
addparm 7 compare       '
addparm 1:var           'variable
addparm 1               ' value to test for
addparm 7 if_call       'if
addparm 0:boolexp       'Comparison type (`<` `==` `>` `<=` `>=` or `!=`)
addparm 3               'pointer to call to

alias ifflag $1 jump $2 'If a flag is set to True, jump to the script at the given offset.
addparm 7 checkflag     '
addparm 1:flag          'flag
addparm 7 if_jump       'if
addparm 0 mask(#01)     ' == True
addparm 3               'pointer to jump to

alias ifflag $1 call $2 'If a flag is set to True, call the script at the given offset.
addparm 7 checkflag     '
addparm 1:flag          'flag
addparm 7 if_call       'if
addparm 0 mask(#01)     ' == True
addparm 3               'pointer to call to

alias ifboy jump $1     'If the player is a boy, jump to script at the given offset
addparm 7 checkgender   '
addparm 7 compare       '
addparm 1 mask(#800D)   '
addparm 1 mask(#0000)   '
addparm 7 if_jump       '
addparm 0 mask(#01)     '
addparm 3               'pointer to jump to


alias ifpartyfull jump $1 'If the players party is full, jump to the script at the given offset.
addparm 7 countpokemon  '
addparm 7 compare       '
addparm 1 mask(#800D)   '
addparm 1 mask(#0006)   '
addparm 7 if_jump       '
addparm 0 mask(#01)     '
addparm 3               'pointer to jump to


' trainerbattle 0x00
alias trainerbattle $1 $2 $3 'Standard trainer battle
addparm 0 0x5c   'addcmmd trainerbattle #5c
addparm 0 0x00   'kind of battle 0:normal
addparm 1        'battle to start
addparm 1 0x00   'mask
addparm 8        'pointer to text winning
addparm 8        'pointer to text losing

' trainerbattle 0x01
alias trainerbattle $1 $2 $3 jump $4 'Trainer battle with jump pointer (kind 0x01)
addparm 0 0x5c   'addcmmd trainerbattle #5c
addparm 0 0x01   'kind of battle 1
addparm 1        'battle to start
addparm 1 0x00   'mask
addparm 8        'pointer to text winning
addparm 8        'pointer to text losing
addparm 3        'jump to

' trainerbattle 0x02
alias trainerbattle2 $1 $2 $3 $4 'Special trainer battle (kind 0x02)
addparm 0 0x5c   'addcmmd trainerbattle #5c
addparm 0 0x02   'kind of battle 2
addparm 1        'battle to start
addparm 1 0x00   'mask
addparm 8        'pointer to text winning
addparm 8        'pointer to text losing
addparm 3        'pointer

' trainerbattle3 0x03
alias trainerbattle3 $1 $2 'Special trainer battle (kind 0x03)
addparm 0 0x5c   'addcmmd trainerbattle #5c
addparm 0 0x03   'kind of battle 3
addparm 1        'battle to start
addparm 1 0x00   'mask
addparm 8        'pointer to text winning

' trainerbattle4 0x04
alias trainerbattle4 $1 $2 $3 $4 'Special trainer battle (kind 0x04)
addparm 0 0x5c   'addcmmd trainerbattle #5c
addparm 0 0x04   'kind of battle 4: Double (?)
addparm 1        'battle to start
addparm 1 0x00   'mask
addparm 8        'pointer to text winning
addparm 8        'pointer to text losing
addparm 3        'pointer

' trainerbattle 0x05
alias trainerbattle5 $1 $2 $3 'Special trainer battle (kind 0x05)
addparm 0 0x5c   'addcmmd trainerbattle #5c
addparm 0 0x05   'kind of battle 5
addparm 1        'battle to start
addparm 1 0x00   'mask
addparm 8        'pointer to text winning
addparm 8        'pointer to text losing

' trainerbattle4 0x07
alias trainerbattle7 $1 $2 $3 $4 'Special trainer battle (kind 0x07)
addparm 0 0x5c   'addcmmd trainerbattle #5c
addparm 0 0x07   'kind of battle 0
addparm 1        'battle to start
addparm 1 0x00   'mask
addparm 8        'pointer to text winning
addparm 8        'pointer to text losing
addparm 3        'pointer

' trainerbattle4 0x09
alias trainerbattle9 $1 $2 $3 'Special trainer battle (kind 0x09)
addparm 0 0x5c   'addcmmd trainerbattle #5c
addparm 0 0x09   'kind of battle 0
addparm 1        'battle to start
addparm 1 0x00   'mask
addparm 8        'pointer to text winning
addparm 8        'pointer to text losing


'
' Compare Constructs (Geeze there's a lot of them!)
'
' compares two values and puts the result of the comparison
' in <lastresult>
'
alias   compare var $1 var $2 'Compare to variables
addparm 7 comparevars
addparm 1 'Variable A
addparm 1 'Variable 2

alias	 compare var $1 byte $2 'Compares a variable to a byte
addparm 7 comparevartobyte
addparm 1 'Variable A
addparm 0 'Byte Value

alias	 compare var $1 word $2 'Compares a variable to a value
addparm 7 compare
addparm 1 'Variable A
addparm 1 'word Value

alias	 compare var $1 val $2 'Compares a variable to a value
addparm 7 compare
addparm 1 'Variable A
addparm 1 'word Value

alias	 compare var $1 int $2 'Compares a variable to a value
addparm 7 compare
addparm 1 'Variable A
addparm 1 'word Value

alias   compare var $1 farbyte $2 'Compare a variable with a byte at some location
addparm 7 comparevartofarbyte
addparm 1 'Variable A
addparm 3 'Pointer to a byte value to compare A to

alias   compare var $1 pointer $2 'Compare a variable with a byte at some location
addparm 7 comparevartofarbyte
addparm 1 'Variable A
addparm 3 'Pointer to a byte value to compare A to

alias   compare farbyte $1 var $2 'Compares a byte at some location to a variable
addparm 7 comparefarbytetovar
addparm 3 'Pointer to a byte value to compare B to
addparm 1 'Variable B

alias   compare farbyte $1 byte $2 'Compares a byte at some location to a byte value
addparm 7  comparefarbytetobyte
addparm 3 'Pointer to a byte value to compare with
addparm 0 'Byte value to compare with

alias   compare farbyte $1 farbyte $2 'Compares bytes at pointer locations
addparm 7 comparefarbytetofarbyte
addparm 3 'Pointer to a byte value to compare with
addparm 3 'Pointer to a byte value to compare with

alias   compare pointer $1 var $2 'Compares a byte at some location to a variable
addparm 7 comparefarbytetovar
addparm 3 'Pointer to a byte value to compare B to
addparm 1 'Variable B

alias   compare pointer $1 byte $2 'Compares a byte at some location to a byte value
addparm 7  comparefarbytetobyte
addparm 3 'Pointer to a byte value to compare with
addparm 0 'Byte value to compare with

alias   compare pointer $1 pointer $2 'Compares bytes at pointer locations
addparm 7 comparefarbytetofarbyte
addparm 3 'Pointer to a byte value to compare with
addparm 3 'Pointer to a byte value to compare with


'addcmmd HashNamePoke #27
'addparm 2
'addparm 2
'addparm 2
'addparm 2
'addparm 2
'addparm 0

'addcmmd warp #39 'Warp to another level
'addparm 0 'Bank to warp to
'addparm 0 'Level to warp to
'addparm 0 'Exit to warp to
